import spotipy
from spotipy.oauth2 import SpotifyOAuth
import webbrowser

class SpotifyService:
    def __init__(self):
        self.client_id = '915eb828361f40e4860265b6fb929a2b'
        self.client_secret = '45c51b3c512644099b1f43ea7065a189'
        self.redirect_uri = 'http://localhost:3000/callback'  # Changed to localhost
        self.scope = ' '.join([
            'user-read-playback-state',
            'user-modify-playback-state',
            'user-read-currently-playing',
            'streaming',
            'app-remote-control',
            'user-read-email',
            'user-read-private',
            'playlist-read-private',
            'playlist-modify-public',
            'playlist-modify-private'
        ])
        
        # Initialize the OAuth manager
        self.auth_manager = SpotifyOAuth(
            client_id=self.client_id,
            client_secret=self.client_secret,
            redirect_uri=self.redirect_uri,
            scope=self.scope,
            open_browser=False  # We'll handle browser opening manually
        )
        
        # Get the auth URL
        self.auth_url = self.auth_manager.get_authorize_url()
        
        # Initialize Spotify client
        self.sp = None
    
    def start_auth(self):
        """
        Start the authentication process by opening the browser
        """
        print(f"Please visit this URL to authorize the application: {self.auth_url}")
        webbrowser.open(self.auth_url)
    
    def complete_auth(self, code):
        """
        Complete the authentication process using the callback code
        """
        try:
            # Get the access token using the code
            token_info = self.auth_manager.get_access_token(code)
            
            # Initialize the Spotify client with the token
            self.sp = spotipy.Spotify(auth=token_info['access_token'])
            return True
        except Exception as e:
            print(f"Authentication error: {str(e)}")
            return False

    def get_mood_recommendations(self, mood):
        """
        Get song recommendations based on mood
        """
        # Mood-based audio features
        mood_features = {
            'bad': {
                'seed_genres': ['sad', 'acoustic', 'piano'],
                'target_valence': 0.2,
                'target_energy': 0.3,
                'target_tempo': 70,
                'limit': 5
            },
            'neutral': {
                'seed_genres': ['pop', 'indie', 'alternative'],
                'target_valence': 0.5,
                'target_energy': 0.5,
                'target_tempo': 110,
                'limit': 5
            },
            'good': {
                'seed_genres': ['dance', 'pop', 'happy'],
                'target_valence': 0.8,
                'target_energy': 0.8,
                'target_tempo': 130,
                'limit': 5
            }
        }

        # Get the features for the given mood
        features = mood_features.get(mood, mood_features['neutral'])

        try:
            # Get recommendations from Spotify
            recommendations = self.sp.recommendations(**features)
            
            # Format the response
            tracks = []
            for track in recommendations['tracks']:
                tracks.append({
                    'id': track['id'],
                    'name': track['name'],
                    'artist': track['artists'][0]['name'],
                    'album': track['album']['name'],
                    'image_url': track['album']['images'][0]['url'] if track['album']['images'] else None,
                    'preview_url': track['preview_url'],
                    'spotify_url': track['external_urls']['spotify'],
                    'uri': track['uri']
                })
            
            return {
                'success': True,
                'tracks': tracks,
                'mood': mood
            }

        except Exception as e:
            print(f"Error getting recommendations: {str(e)}")
            return {
                'success': False,
                'error': str(e),
                'mood': mood
            }

    def create_mood_playlist(self, mood, track_uris):
        """
        Create a new playlist based on mood and add tracks
        """
        try:
            # Get current user's ID
            user_id = self.sp.current_user()['id']
            
            # Create playlist
            playlist_name = f"Mood Mix: {mood.capitalize()}"
            playlist = self.sp.user_playlist_create(
                user_id,
                playlist_name,
                public=False,
                description=f"Music for {mood} mood - Generated by Mood Log Music"
            )
            
            # Add tracks to playlist
            if track_uris:
                self.sp.playlist_add_items(playlist['id'], track_uris)
            
            return {
                'success': True,
                'playlist_id': playlist['id'],
                'playlist_url': playlist['external_urls']['spotify'],
                'playlist_name': playlist_name
            }

        except Exception as e:
            print(f"Error creating playlist: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }

# Example usage
if __name__ == "__main__":
    spotify = SpotifyService()
    
    # Start authentication
    spotify.start_auth()
    
    # Wait for the code from callback
    code = input("Please enter the code from the callback URL: ")
    
    # Complete authentication
    if spotify.complete_auth(code):
        print("Authentication successful!")
        
        # Test getting recommendations
        print("\nTesting recommendations for different moods...")
        moods = ['bad', 'neutral', 'good']
        for mood in moods:
            print(f"\nGetting recommendations for {mood} mood:")
            recommendations = spotify.get_mood_recommendations(mood)
            if recommendations['success']:
                for track in recommendations['tracks']:
                    print(f"- {track['name']} by {track['artist']}")
            else:
                print(f"Error: {recommendations['error']}")
    
    # Test creating a playlist
    print("\nTesting playlist creation...")
    mood = 'good'
    recommendations = spotify.get_mood_recommendations(mood)
    if recommendations['success']:
        track_uris = [track['uri'] for track in recommendations['tracks']]
        playlist = spotify.create_mood_playlist(mood, track_uris)
        if playlist['success']:
            print(f"Created playlist: {playlist['playlist_name']}")
            print(f"Playlist URL: {playlist['playlist_url']}")
        else:
            print(f"Error creating playlist: {playlist['error']}")
